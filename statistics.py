#!/usr/bin/python3

import json
import sys, os
import math

################################################
# File load/save

def load_data(file_in):
	data = []
	try:
		with open(file_in, 'r') as file_in:
			data = json.load(file_in)
	except Exception:
		print('File {} could not be read'.format(file_in))
	return data

################################################
# Create buckets

def populate_buckets(data, buckets):
	bucket_list = [0] * buckets
	for stats in data:
		bucket = math.floor(buckets * stats["target"] / stats["distance"])
		if bucket == buckets:
			bucket -= 1
		bucket_list[bucket] += 1
	return bucket_list

################################################
# Analysis

def analyse(name, data, min_buckets):
	print("Statistics for: {}".format(name))
	count = 0
	steps_sum = 0
	distance_sum = 0
	for stats in data:
		steps_sum += stats["steps"]
		distance_sum += stats["target"] / stats["distance"]
		count += 1
	
	if count > 0:
		steps_mean = steps_sum / count
		distance_mean = distance_sum / count

		steps_sum_squared = 0
		distance_sum_squared = 0
		for stats in data:
			steps_sum_squared += (stats["steps"] - steps_mean)**2
			distance_sum_squared += ((stats["target"] / stats["distance"]) - distance_mean)**2
		
		steps_standard_deviation = math.sqrt(steps_sum_squared / count)
		distance_standard_deviation = math.sqrt(distance_sum_squared / count)

		print("\tCount: {}".format(count))

		print("\tSteps mean: {}".format(steps_mean))
		print("\tSteps SD: {}".format(steps_standard_deviation))

		print("\tNormalised distance mean: {}".format(distance_mean))
		print("\tNormalised distance SD: {}".format(distance_standard_deviation))

		lower = 0.5 - (2 / math.sqrt(12 * count))
		upper = 0.5 + (2 / math.sqrt(12 * count))
		print("\tMean 95% CI range: ({}, {})".format(lower, upper))

	else:
		print("\tNo entries")

	lowest_order = 0
	buckets = 17
	if buckets <= min_buckets:
		buckets = min_buckets + 1
	#buckets = 101
	while (buckets > min_buckets) and (lowest_order < 5):
		buckets -= 1
		bucket_list = populate_buckets(data, buckets)
		lowest_order = min(bucket_list)
	
	expected_order = count / buckets

	chi_squared = 0
	for bucket in bucket_list:
		chi_squared += (bucket - expected_order)**2 / expected_order**2
		intermediate = (bucket - expected_order)**2 / expected_order**2

	print("\tBuckets: {}".format(buckets))
	print("\tLowest order: {}".format(min(bucket_list)))
	print("\tChi squared: {}".format(chi_squared))


	print("\tBucket counts::")
	print("\t[", end='')
	for pos in range(buckets):
		print("{}".format(bucket_list[pos]), end='')
		if pos != buckets - 1:
			print(", ", end='')
	print(']')

	print()

################################################
# Application utils

def print_syntax():
	print('Syntax: statistics <input-directory> [bucket-min]')
	print()
	print('\tGenerate statistics for all json analysis files (generated by ')
	print('\tanalysis.py) in a given directory.')
	print('\t<input-directory> : the directory to read analysis json files from.')
	print('\t[bucket-min]      : minimum number of buckets to allow; defaults to 3.')
	print()
	print('Example usage')
	print('\tstatistics stats/c 100')

################################################
# Main

if len(sys.argv) < 2 or len(sys.argv) > 3:
	print_syntax()
	exit()

# Load the data into memory
directory_in = sys.argv[1]
min_buckets = 17
if len(sys.argv) == 3:
	min_buckets = int(sys.argv[2])

files = os.listdir(directory_in)
files.sort()
for file_in in files:
	if file_in.endswith('.json'):
		data = load_data(directory_in +"/" + file_in)
		name = file_in[:-5]
		analyse(name, data, min_buckets)




